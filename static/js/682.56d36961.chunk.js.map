{"version":3,"file":"static/js/682.56d36961.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt='Error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;\r\n\r\n//process.env.PUBLIC_URL + '/error.gif' - if we wont add img from public folder use this construction","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './comicsList.scss';\r\n\r\nconst ComicsList = () => {\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n    const [comEnded, setComEnded] = useState(false);\r\n\r\n    const { loading, error, getAllComics } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded);\r\n    }\r\n\r\n    const onComicsListLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n\r\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\r\n        setNewItemLoading(loading => false);\r\n        setOffset(offset => offset + 8);\r\n        setComEnded(charEnded => ended);\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = { 'objectFit': 'cover' };\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = { 'objectFit': 'unset' };\r\n            }\r\n\r\n            return (\r\n                <li key={i} className=\"comics__item\">\r\n                    <Link to={`/comics/${item.id}`}>\r\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" style={imgStyle} />\r\n                        <div className=\"comics__item-name\">{item.title}</div>\r\n                        <div className=\"comics__item-price\">{item.price}</div>\r\n                    </Link>\r\n                </li>\r\n            );\r\n        })\r\n\r\n        return (\r\n            <ul className=\"comics__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(comicsList);\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}\r\n                disabled={newItemLoading}\r\n                style={{ 'display': comEnded ? 'none' : 'block' }} >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","import AppBanner from '../appBanner/AppBanner';\r\nimport ComicsList from '../comicsList/ComicsList';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Couldn't fetch ${url}, status ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError };\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5682b0f08a495c414b165841055a2e74';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(\r\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n\r\n    const getCharacterComics = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}/comics?orderBy=title&limit=10&${_apiKey}`);\r\n        return res.data.results.map(_transformCharComics)\r\n    }\r\n\r\n    const getAllCharInfo = (id) => {\r\n        return Promise.all([getCharacter(id), getCharacterComics(id)]);\r\n    }\r\n\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                ? `${char.description.slice(0, 210)}...`\r\n                : \"There is no description for this character\",\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        };\r\n    };\r\n\r\n    const _transformCharComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic,\r\n        getCharacterComics,\r\n        getAllCharInfo,\r\n        getCharacterByName\r\n    };\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comEnded","setComEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","charEnded","items","arr","map","item","i","imgStyle","thumbnail","Link","to","concat","id","title","price","renderItems","errorMessage","spinner","Spinner","onClick","disabled","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","getCharacter","res","_transformCharacter","results","getCharacterComics","_transformCharComics","char","name","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","getComic","getAllCharInfo","Promise","all","getCharacterByName"],"sourceRoot":""}