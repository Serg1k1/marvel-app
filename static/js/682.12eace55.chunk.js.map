{"version":3,"file":"static/js/682.12eace55.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt='Error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;\r\n\r\n//process.env.PUBLIC_URL + '/error.gif' - if we wont add img from public folder use this construction","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './comicsList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner />;\r\n        case 'loading':\r\n            return newItemLoading ? <Component /> : <Spinner />;\r\n        case 'confirmed':\r\n            return <Component />\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst ComicsList = () => {\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n    const [comEnded, setComEnded] = useState(false);\r\n\r\n    const { getAllComics, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onComicsListLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n\r\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\r\n        setNewItemLoading(loading => false);\r\n        setOffset(offset => offset + 8);\r\n        setComEnded(charEnded => ended);\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = { 'objectFit': 'cover' };\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = { 'objectFit': 'unset' };\r\n            }\r\n\r\n            return (\r\n                <li key={i} className=\"comics__item\">\r\n                    <Link to={`/comics/${item.id}`}>\r\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" style={imgStyle} />\r\n                        <div className=\"comics__item-name\">{item.title}</div>\r\n                        <div className=\"comics__item-price\">{item.price}</div>\r\n                    </Link>\r\n                </li>\r\n            );\r\n        })\r\n\r\n        return (\r\n            <ul className=\"comics__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    // const items = renderItems(comicsList);\r\n    // const errorMessage = error ? <ErrorMessage /> : null;\r\n    // const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}\r\n                disabled={newItemLoading}\r\n                style={{ 'display': comEnded ? 'none' : 'block' }} >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","import { Helmet } from 'react-helmet';\r\n\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport ComicsList from '../comicsList/ComicsList';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page of our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Couldn't fetch ${url}, status ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch (e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess };\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5682b0f08a495c414b165841055a2e74';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(\r\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n\r\n    const getCharacterComics = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}/comics?orderBy=title&limit=10&${_apiKey}`);\r\n        return res.data.results.map(_transformCharComics)\r\n    }\r\n\r\n    const getAllCharInfo = (id) => {\r\n        return Promise.all([getCharacter(id), getCharacterComics(id)]);\r\n    }\r\n\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                ? `${char.description.slice(0, 210)}...`\r\n                : \"There is no description for this character\",\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        };\r\n    };\r\n\r\n    const _transformCharComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    return {\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic,\r\n        getCharacterComics,\r\n        getAllCharInfo,\r\n        getCharacterByName\r\n    };\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","setContent","process","Component","newItemLoading","Spinner","Error","ComicsList","comicsList","setComicsList","useState","setNewItemLoading","offset","setOffset","comEnded","setComEnded","getAllComics","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","loading","charEnded","arr","items","map","item","i","imgStyle","thumbnail","Link","to","concat","id","title","price","renderItems","onClick","disabled","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_apiKey","getCharacter","res","_transformCharacter","data","results","getCharacterComics","_transformCharComics","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","getComic","getAllCharInfo","Promise","all","getCharacterByName"],"sourceRoot":""}