{"version":3,"file":"static/js/772.b841ab5b.chunk.js","mappings":"sPAIA,MAaA,EAbkBA,KAEVC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAUC,IAAI,cACxBN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,0BACRC,EAAAA,EAAAA,KAAA,SAAK,kBAG/BA,EAAAA,EAAAA,KAAA,OAAKC,IAAKG,EAAcD,IAAI,oB,yGCVxC,MAMA,EANqBE,KAEbL,EAAAA,EAAAA,KAAA,OAAKM,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAAYV,IAAKW,EAAKT,IAAI,S,8GCGjI,MAyCA,EAzCmBU,IAA8B,IAA7B,UAAEC,EAAS,SAAEC,GAAUF,EACvC,MAAM,GAAEG,IAAOC,EAAAA,EAAAA,OACRC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC3B,SAAEC,EAAQ,aAAEC,EAAY,WAAEC,EAAU,QAAEC,EAAO,WAAEC,IAAeC,EAAAA,EAAAA,MAEpEC,EAAAA,EAAAA,YAAU,KACNC,GAAY,GAEb,CAACZ,IAEJ,MAAMY,EAAaA,KAGf,OAFAL,IAEQR,GACJ,IAAK,QACDM,EAASL,GAAIa,KAAKC,GAAcD,MAAK,IAAMJ,EAAW,eACtD,MACJ,IAAK,YACDH,EAAaN,GAAIa,KAAKC,GAAcD,MAAK,IAAMJ,EAAW,eAC1D,MACJ,QACI,MAAM,IAAIM,MAAM,4BACxB,EAGED,EAAgBZ,IAClBC,EAAQD,EAAK,EAOjB,OACIrB,EAAAA,EAAAA,MAAAmC,EAAAA,SAAA,CAAAjC,SAAA,EACIC,EAAAA,EAAAA,KAACJ,EAAAA,EAAS,KACTqC,EAAAA,EAAAA,GAAWT,EAASV,EAAWI,KACjC,C,gDC1CJ,MCmGP,EAnGyBQ,KACrB,MAAM,QAAEQ,EAAO,WAAEX,EAAU,QAAEC,EAAO,WAAEC,GDDnBU,MACnB,MAAOX,EAASC,IAAcL,EAAAA,EAAAA,UAAS,WA2BvC,MAAO,CAAEc,SAzBOE,EAAAA,EAAAA,cAAYC,eAAOC,GAAwF,IAAnFC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAAOG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMI,EAAOJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAE,eAAgB,oBAE7Ff,EAAW,WAEX,IACI,MAAMoB,QAAiBC,MAAMR,EAAK,CAAEC,SAAQI,OAAMC,YAElD,IAAKC,EAASE,GACV,MAAM,IAAIhB,MAAM,kBAADiB,OAAmBV,EAAG,aAAAU,OAAYH,EAASI,SAK9D,aAFmBJ,EAASK,MAGhC,CAAE,MAAOC,GAEL,MADA1B,EAAW,SACL0B,CACV,CAEJ,GAAG,IAMe5B,YAJCa,EAAAA,EAAAA,cAAY,KAC3BX,EAAW,UAAU,GACtB,IAE2BD,UAASC,aAAY,EC3BEU,GAE/CiB,EAAW,4CACXC,EAAU,0CAUV/B,EAAee,UACjB,MAAMiB,QAAYpB,EAAQ,GAADc,OAAII,EAAQ,eAAAJ,OAAchC,EAAE,KAAAgC,OAAIK,IACzD,OAAOE,EAAoBD,EAAIpC,KAAKsC,QAAQ,GAAG,EAS7CC,EAAqBpB,gBACLH,EAAQ,GAADc,OAAII,EAAQ,eAAAJ,OAAchC,EAAE,mCAAAgC,OAAkCK,KAC5EnC,KAAKsC,QAAQE,IAAIC,GAoB1BJ,EAAuBK,IAClB,CACH5C,GAAI4C,EAAK5C,GACT6C,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAAW,GAAAd,OACpBY,EAAKE,YAAYC,MAAM,EAAG,KAAI,OACjC,6CACNC,UAAWJ,EAAKI,UAAUC,KAAO,IAAML,EAAKI,UAAUE,UACtDC,SAAUP,EAAKQ,KAAK,GAAG9B,IACvB+B,KAAMT,EAAKQ,KAAK,GAAG9B,IACnBgC,OAAQV,EAAKU,OAAOC,QAItBZ,EAAwBW,IACnB,CACHtD,GAAIsD,EAAOtD,GACXwD,MAAOF,EAAOE,QAIhBC,EAAoBH,IAAY,IAADI,EACjC,MAAO,CACH1D,GAAIsD,EAAOtD,GACXwD,MAAOF,EAAOE,MACdV,YAAaQ,EAAOR,aAAe,0BACnCa,UAAWL,EAAOK,UAAS,GAAA3B,OAClBsB,EAAOK,UAAS,OACnB,2CACNX,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DU,UAA+B,QAArBF,EAAAJ,EAAOO,YAAY,UAAE,IAAAH,OAAA,EAArBA,EAAuBE,WAAY,QAE7CE,MAAOR,EAAOS,OAAO,GAAGD,MAAK,GAAA9B,OACpBsB,EAAOS,OAAO,GAAGD,MAAK,KACzB,gBACT,EAGL,MAAO,CACHvD,aACAC,UACAC,aACAuD,iBAlFqB3C,iBAAiC,IAA1B4C,EAAMzC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFlB,IAMhB,aAHkBN,EAAQ,GAADc,OAClBI,EAAQ,8BAAAJ,OAA6BiC,EAAM,KAAAjC,OAAIK,KAE3CnC,KAAKsC,QAAQE,IAAIH,EAChC,EA8EIjC,eACA4D,aAxDiB7C,iBAAuB,IAAhB4C,EAAMzC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAIjC,aAHkBN,EAAQ,GAADc,OAClBI,EAAQ,8CAAAJ,OAA6CiC,EAAM,KAAAjC,OAAIK,KAE3DnC,KAAKsC,QAAQE,IAAIe,EAChC,EAoDIpD,SAlDagB,UACb,MAAMiB,QAAYpB,EAAQ,GAADc,OAAII,EAAQ,WAAAJ,OAAUhC,EAAE,KAAAgC,OAAIK,IACrD,OAAOoB,EAAiBnB,EAAIpC,KAAKsC,QAAQ,GAAG,EAiD5CC,qBACA0B,eAhEoBnE,GACboE,QAAQC,IAAI,CAAC/D,EAAaN,GAAKyC,EAAmBzC,KAgEzDsE,mBA5EuBjD,gBACLH,EAAQ,GAADc,OAAII,EAAQ,oBAAAJ,OAAmBa,EAAI,KAAAb,OAAIK,KACrDnC,KAAKsC,QAAQE,IAAIH,GA2E/B,C,kEChGL,MAiBA,EAjBiBgC,KAET1F,EAAAA,EAAAA,MAAAmC,EAAAA,SAAA,CAAAjC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,eAAcC,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAEnBE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gCCM/B,EAfmBmC,CAACT,EAASV,EAAWI,KACpC,OAAQM,GACJ,IAAK,UACD,OAAOxB,EAAAA,EAAAA,KAACuF,EAAQ,IACpB,IAAK,UACD,OAAOvF,EAAAA,EAAAA,KAACwF,EAAAA,EAAO,IACnB,IAAK,YACD,OAAOxF,EAAAA,EAAAA,KAACc,EAAS,CAACI,KAAMA,IAC5B,IAAK,QACD,OAAOlB,EAAAA,EAAAA,KAACK,EAAAA,EAAY,IACxB,QACI,MAAM,IAAI0B,MAAM,4BACxB,C","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt='Error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;\r\n\r\n//process.env.PUBLIC_URL + '/error.gif' - if we wont add img from public folder use this construction","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n    const { id } = useParams();\r\n    const [data, setData] = useState(null);\r\n    const { getComic, getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n        // eslint-disable-next-line\r\n    }, [id])\r\n\r\n    const updateData = () => {\r\n        clearError();\r\n\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComic(id).then(onDataLoaded).then(() => setProcess('confirmed'));\r\n                break;\r\n            case 'character':\r\n                getCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'));\r\n                break;\r\n            default:\r\n                throw new Error('Unexpected process state');\r\n        }\r\n    }\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data);\r\n    }\r\n\r\n    // const errorMessage = error ? <ErrorMessage /> : null;\r\n    // const spinner = loading ? <Spinner /> : null;\r\n    // const content = !(loading || error || !data) ? <Component data={data} /> : null;\r\n\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            {setContent(process, Component, data)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SinglePage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Couldn't fetch ${url}, status ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch (e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess };\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5682b0f08a495c414b165841055a2e74';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(\r\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n\r\n    const getCharacterComics = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}/comics?orderBy=title&limit=10&${_apiKey}`);\r\n        return res.data.results.map(_transformCharComics)\r\n    }\r\n\r\n    const getAllCharInfo = (id) => {\r\n        return Promise.all([getCharacter(id), getCharacterComics(id)]);\r\n    }\r\n\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                ? `${char.description.slice(0, 210)}...`\r\n                : \"There is no description for this character\",\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        };\r\n    };\r\n\r\n    const _transformCharComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    return {\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic,\r\n        getCharacterComics,\r\n        getAllCharInfo,\r\n        getCharacterByName\r\n    };\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'confirmed':\r\n            return <Component data={data} />\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","Error","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","concat","status","json","e","_apiBase","_apiKey","res","_transformCharacter","results","getCharacterComics","map","_transformCharComics","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","_transformComics","_comics$textObjects$","pageCount","language","textObjects","price","prices","getAllCharacters","offset","getAllComics","getAllCharInfo","Promise","all","getCharacterByName","Skeleton","Spinner"],"sourceRoot":""}